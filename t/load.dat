---
abstract: Top Level Map (Hash)
script: |
 use YAML;
 
 my $map = { 
 	   name => 'Brian Ingerson',
 	   rank => 'JAPH',
 	   'serial number' => 8675309,
 	  };
 
 print YAML::Store($map);
yaml: |
 name: Brian Ingerson
 rank: JAPH
 serial number: 8675309
---
abstract: Top Level List (Array)
script: |
 use YAML;
 
 my $list = [qw(red
 	       yellow
 	       green
 	       blue
 	       orange
 	       violet
 	       brown
 	      )
 	   ];
 
 print YAML::Store($list);
yaml: |
 - red
 - yellow
 - green
 - blue
 - orange
 - violet
 - brown
---
abstract: Map of Lists
script: |
 use YAML;
 
 my $map_of_lists =
   {
    fruits => [qw(apples oranges pears)],
    meats => [qw(beef pork chicken)],
    vegetables => [qw(carrots peas corn)],
   };
 
 print YAML::Store($map_of_lists);
yaml: |
 fruits:
  - apples
  - oranges
  - pears
 meats:
  - beef
  - pork
  - chicken
 vegetables:
  - carrots
  - peas
  - corn
---
abstract: List of Maps
script: |
 use YAML;
 
 my $list = 
   [
    {
     'first name' => 'Brian',
     'last name' => 'Ingerson'
    },
    {
     'first name' => 'Clark',
     'last name' => 'Evans'
    },
    {
     'first name' => 'Oren',
     'last name' => 'Ben-Kiki'
    }
   ];
 
 print YAML::Store($list);
yaml: |
 -
  first name: Brian
  last name: Ingerson
 -
  first name: Clark
  last name: Evans
 -
  first name: Oren
  last name: Ben-Kiki
---
abstract: Blessed Hash
script: |
 use YAML;
 
 my $obj = { 
 	   color => 'blue',
 	   shape => 'round',
 	   size => 'big',
 	  };
 bless $obj, 'Foo::Bar';
 
 print YAML::Store($obj);
yaml: |
 --- !perl/hash:Foo::Bar
 color: blue
 shape: round
 size: big
---
abstract: Series of Maps
script: |
 use YAML;
 
 my $a = { map {split /:\s*/, $_, 2} split /\n/, <<END };
 date: Sun Oct 28 20:41:17 2001
 error msg: Premature end of script headers
 END
 
 my $b = { map {split /:\s*/, $_, 2} split /\n/, <<END };
 date: Sun Oct 28 20:41:44 2001
 error msg: malformed header from script. Bad header=</UL>
 END
 
 my $c = { map {split /:\s*/, $_, 2} split /\n/, <<END };
 date: Sun Oct 28 20:42:19 2001
 error msg: malformed header from script. Bad header=</UL>
 END
 
 print YAML::Store($a, $b, $c);
yaml: |
 ---
 date: Sun Oct 28 20:41:17 2001
 error msg: Premature end of script headers
 ---
 date: Sun Oct 28 20:41:44 2001
 error msg: malformed header from script. Bad header=</UL>
 ---
 date: Sun Oct 28 20:42:19 2001
 error msg: malformed header from script. Bad header=</UL>
---
abstract: A Mix of Things
script: |
 use YAML;
 
 $a = {a => 'map'};
 $b = ['a', 'sequence'];
 $c = 'plain scalar';
 $d = "escaped\nscalar";
 $e = <<END;
 This
  is
   a
    block.
     It's
     kinda
    like
   a
  here
 document.
 END
 $f = <<END;
 A
  chomped
   block.
 END
 chomp($f);
 
 print YAML::Store($a, $b, $c, $d, $e, $f);
yaml: |
 # Top level documents
 #
 # Note that inline (single line) values
 # are not allowed at the top level. This
 # includes implicit values, quoted values
 # and inline collections.
 ---
 a: map
 ---
 - a
 - sequence
 --- \
 plain scalar
 --- \\
 escaped\nscalar
 --- |
 This
  is
   a
    block.
     It's
     kinda
    like
   a
  here
 document.
 --- ||
 A
  chomped
   block.
---
abstract: 
script: |
 use YAML;
 
 $a = [1,2,3];
 $b = [1,2,3,];
 $c = ["","","","",];
 $d = [",",","];
 $e = {foo => 'bar', baz => 'too'};
 $f = [];
 $g = {};
 $h = {'9:00' => 'Breakfast', '12:00' => 'lunch time'};
 $i = bless {small => 'object'}, 'XYZ';
 $j = bless [bless([a,b,c], 'DEF'), 
             bless({do => 're', mi => 'fa', so => 'la', ti => 'do'}, 'GHI'),
 	   ], 'ABC';
 $k = [];
 push @$k, $k, $k, $k;
 $l = [{name => 'Ingy'}, {name => 'Clark'}, {name => 'Oren'}, ];
 
 print YAML::Store [$a, $b, $c, $d, $e, $f, $g, $h, $i, $j, $k, $l];
yaml: |
 # Inline collections
 #
 # sequence
 ---
 - [1,2,3]
 # trailing comma is ignored
 # still 3 elements
 - [1,2,3,]
 # four empty strings
 - [,,,,]
 # a pair of commas
 - [",",","]
 # a map
 - {foo: bar,baz: too}
 # empty sequence
 - []
 # empty map
 - {}
 # times for keys (key/value separator is ': ')
 - {9:00: Breakfast, 12:00: lunch time,}
 # a private Perl XYZ object
 - !perl/hash:XYZ {small: object}
 # an object containing objects
 - !perl/array:ABC [!perl/array:DEF [a,b,c],!perl/hash:GHI {do: re, mi: fa, so: la,ti: do}]
 # sequences of self referential elements
 # (inline form not working yet) :(
 # - &FOO [*FOO,*FOO,*FOO]
 - &FOO
  - *FOO
  - *FOO
  - *FOO
 #
 # sequence of maps
 - [{name: Ingy},{name: Clark},{name: Oren},]
